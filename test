from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.backends import default_backend
import base64

def encrypt_ecb(key, plaintext):
    # Pad the plaintext to be a multiple of 16 bytes (block size for AES)
    padded_plaintext = plaintext.ljust((len(plaintext) + 15) // 16 * 16)

    # Create an AES cipher in ECB mode
    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())

    # Create an encryptor
    encryptor = cipher.encryptor()

    # Encrypt the padded plaintext
    ciphertext = encryptor.update(padded_plaintext.encode()) + encryptor.finalize()

    # Encode the ciphertext to avoid problematic characters
    encoded_ciphertext = base64.b64encode(ciphertext).decode('utf-8')

    return encoded_ciphertext

def decrypt_ecb(key, encoded_ciphertext):
    # Decode the encoded ciphertext
    ciphertext = base64.b64decode(encoded_ciphertext)

    # Create an AES cipher in ECB mode
    cipher = Cipher(algorithms.AES(key), modes.ECB(), backend=default_backend())

    # Create a decryptor
    decryptor = cipher.decryptor()

    # Decrypt the ciphertext
    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()

    # Remove padding
    unpadded_data = decrypted_data.rstrip(b'\x00').decode('utf-8')

    return unpadded_data



# Example usage:
