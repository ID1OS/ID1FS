#!/bin/python3
import click
import os
import sys
import json
import shutil
import logging
import id1fs_functions as id1fs


@click.command()
@click.argument('path_to_move', type=click.STRING,required=1)
@click.argument('where_to_move', type=click.STRING,required=1)


def move(where_to_move,path_to_move):
    path_to_move=id1fs.generate_full_path(path_to_move)
    where_to_move=id1fs.generate_full_path(where_to_move)
    root=id1fs.get_root()
    try:
        if os.path.exists(where_to_move):
            if os.path.isdir(where_to_move):
                if os.path.isdir(path_to_move):
                    for root, dirs, files in os.walk(path_to_move, topdown=False):
                        for file in files:
                            id1fs.delete_file_backup(os.path.join(root,file))
                            id1fs.delete_metadata(os.path.join(root,file))
                    shutil.move(path_to_move, where_to_move)
                    for root, dirs, files in os.walk(os.path.join(where_to_move,os.path.basename(path_to_move))):
                        for file in files:
                            id1fs.create_file_backup(os.path.join(root,file))
                            id1fs.create_metadata(os.path.join(root,file))
                    click.echo(f"{path_to_move} was moved successfully")
                elif os.path.isfile(path_to_move):
                    id1fs.delete_metadata(path_to_move)
                    id1fs.delete_file_backup(path_to_move)
                    shutil.copy(path_to_move,os.path.join(where_to_move,os.path.basename(path_to_move)))
                    id1fs.create_metadata(os.path.join(where_to_move,os.path.basename(path_to_move)))
                    id1fs.create_file_backup(os.path.join(where_to_move,os.path.basename(path_to_move)))
                    os.remove(path_to_move)
                    click.echo(f"{path_to_move} was moved successfully")
            elif os.path.isfile(where_to_move):
                click.echo(f"the destination that you gived me is file\n make sure that you didn't confuse the order \nTry move {where_to_move} {path_to_move}")
        else:
            click.echo(f"{where_to_move} does not exist ")    
    except FileNotFoundError:
        click.echo("file not found")
        sys.exit()


move()